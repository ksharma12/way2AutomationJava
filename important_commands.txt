/*
    Rules for Creation:
      {class} should be start from capital letter and follow camel casing
      Name should represent [Nouns]
      eg: Way2Automation, Animal, Plant, ByIdOrName etc

      {interfaces} should be start from capital letter and follow camel casing
      Name should represent [Adjectives]
      eg: Runnable, ActionListener, Serializable

      {methods} should be start from small letter and follow camel casing
      Name should represent [Verb-Noun]
      eg: getResult, doCalculation, etc

      {variables} should be start from small letter and follow camel casing
      Name should represent [small-meaning-words]
      eg: buttonWidth, accountBalance, myList

      {constants} should be all upper case and _ used to connect them
      Name should represent [EXIT_ON_CLOSE]
      eg: EXIT_ON_CLOSE, MIN_HEIGHT, etc
*/

intendation :- ctrl + alt + I

final keyword :-
variable - becomes constant
method - cannot be override
class - cannot be inherited

       throwable
       |   |
      |     |
     |       |
    |         |
   |           |
 Error        Exception
                |    |
               |      |
              |        |
             |          |
          IOExceptions   |
                         RuntimeExceptions

Access Modifiers :-
|---------------------------|
|Public                     |
||--------------------------|
||Protected                 |
||--------------------------|
|||Default                  |
|||-------------------------|
||||Private                 |                        |
|---------------------------|

Class :-
Public  - Can be accessed anywhere in java world
Default - Can be accessed within its own package only
Protected/Private - classes not exist

Class Member(method/variable) :-
Public    - Can be accessed anywhere in java world
Default   - Can be accessed within its own package only
Protected - Can be accessed within its own package and outside package via inheritance
Private   - Can be accessed within its own class only

|-----------|---------------|----------------------------|-----------------|--------------------------------|-----------------------------------|-----------------|--------------|
|Modifier   | Same class    | Outside Class Same Package | Outside Package | Same Package Using Inheritance | Outside Package Using Inheritance | Most Restricted | Most Visible |
|-----------|---------------|----------------------------|-----------------|--------------------------------|-----------------------------------|-----------------|--------------|
|Public     | variable yes  |        variable yes        |   variable yes  |          variable yes          |           variable yes            |                 |              |
|           | method   yes  |        method   yes        |   method   yes  |          method   yes          |           method   yes            |        4        |      1       |
|           |               |                            |                 |                                |                                   |                 |              |
|-----------|---------------|----------------------------|-----------------|--------------------------------|-----------------------------------|-----------------|--------------|
|Protected  | variable yes  |        variable yes        |   variable no   |          variable yes          |           variable yes            |                 |              |
|           | method   yes  |        method   yes        |   method   no   |          method   yes          |           method   yes            |        3        |      2       |
|           |               |                            |                 |                                |                                   |                 |              |
|-----------|---------------|----------------------------|-----------------|--------------------------------|-----------------------------------|-----------------|--------------|
|Default    | variable yes  |        variable yes        |   variable no   |          variable yes          |           variable no             |                 |              |
|           | method   yes  |        method   yes        |   method   no   |          method   yes          |           method   no             |        2        |      3       |
|           |               |                            |                 |                                |                                   |                 |              |
|-----------|---------------|----------------------------|-----------------|--------------------------------|-----------------------------------|-----------------|--------------|
|Private    | variable yes  |        variable no         |   variable no   |          variable no           |           variable no             |                 |              |
|           | method   yes  |        method   no         |   method   no   |          method   no           |           method   no             |        1        |      4       |
|           |               |                            |                 |                                |                                   |                 |              |
|-----------|---------------|----------------------------|-----------------|--------------------------------|-----------------------------------|-----------------|--------------|

Inheritance   :- sub_Class is a Parent_Class [is a relationship]
Polymorphism  :- overloading, overriding
abstract, interfaces
Object classes
Data hiding   :- hiding data from outside world so that it cannot be accessed directly
abstraction   :- force calling data which is hidden using some methods
getters and setters

------------------------------------------------------------------------ENCAPSULATION-------------------------------------------------------------------------------
Encapsulation :- design pattern [data binding / wrapping up data and methods in single unit]
How to achieve it :-
1. Always make instance variables private
2. Always make public accessor methods and force calling them to access instance variables
3. User Naming conventions setters() and getters() for these methods

Drawbacks of not applying encapsulation:-
exposed variables which leads to data leak

------------------------------------------------------------------------INHERITANCE-------------------------------------------------------------------------------
INHERITANCE :-
class inherit another class         :- extends
interface inherit another interface :- extends
class inherit another interface     :- implements
interface inherit a class           :- N/A

- Single
- Multiple
- MultiLevel
- Hybrid
- Hierarchical

- Note : If there are same methods in all/some classes which are inherited in hierarchy then closest method would be accessed by the last child
- an [object of subclass] can be assigned to [parent class instance]
  A a = new C(); [polymorphic reference]
         A
       spark()
       |   |
      |     |
     |       |
    |         |
   |           |
   B              C
                spark()
                |    |
               |      |
              |        |
             |          |
             D          E
                       spark() from C Called
                       not from A

Purpose of inheritance :-
------------------------------------------------------------------------POLYMORPHISM-------------------------------------------------------------------------------
POLYMORPHISM -
(action/behaviour)
same name multiple form :-
1. Compile Time polymorphism / Early binding / static binding / overloading
2. Run Time polymorphism / late binding / overriding

OVERLOADING :-
1. Compile Time polymorphism / Early binding / static binding / overloading :-
 - Overloading implementation by making the signatures of methods different
 - we cannot achieve method overloading by keeping method signature same but different return type
 - main method can also be overloaded

* varargs :- method which can accept variable length of arguments
 - var args... must always be at the last of the formal parameter list
 - these arguments come in the form of array

 Ambiguity :- Errors which came at the time of compile [calling overloaded function]
 Duplicacy :- Errors which occur at the time of defining the overloaded functions

OVERRIDING :-
different classes (with inheritance applied) we have methods with same signature
- Overriding is done if the parent is unable to fulfill the requirements of child
- same method of parent class in child class but overrides the same
- can we do type change while overriding  - No  [if return types are primitive(byte, char, short, int, long, double, float, boolean)]
- can we do type change while overriding  - Yes [If return types are class name / covariant]
  covariant :- the return types are className and there is a parent-child relationship between those classes.
- method type class should extend the parent class with same method with different return type

Wrapper classes for primitive types :-
int  -  Integer etc.

Not Using OverRiding DrawBacks :-
-

